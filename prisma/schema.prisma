datasource db {
  provider          = "cockroachdb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(uuid())
  name     String?
  username String? @unique
  password String?
  image    String?
}

model Teacher {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  address     String?
  phoneNumber String?
  Class       Class[]
  Session     Session[]
}

model Student {
  id                 String    @id @default(uuid())
  code               String
  fullName           String
  address            String?
  phoneNumber        String?
  email              String?
  type               String
  age                Int?
  ageCategory        String?
  level              String?
  whatsappNumber     String?
  parentName         String?
  parentNumber       String?
  parentEmail        String?
  parentAddress      String?
  parentOccupation   String?
  schoolType         String?
  schoolYear         String?
  registrationDate   DateTime
  registrationStatus String
  expectedClasses    String[]
  paymentStatus      String
  sex                String
  paymentId          String?
  payments           Payment[]
  Kids               Kid[]
  Partner            Partner?
  classes            Class[]
  sessions           Session[]
  sessionId          String?
  note               String?
}

model Partner {
  id        String  @id @default(uuid())
  studentId String  @unique
  partnerId String  @unique
  student   Student @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}

model Kid {
  id        String  @id @default(uuid())
  studentId String
  parentId  String
  student   Student @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Class {
  id          String    @id @default(uuid())
  title       String    @unique
  description String?
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: NoAction)
  programId   String
  program     Program   @relation(fields: [programId], references: [id], onDelete: NoAction)
  levelId     String
  level       Level     @relation(fields: [levelId], references: [id], onDelete: NoAction)
  startDate   DateTime
  endDate     DateTime
  day         String
  startTime   String
  endTime     String
  students    Student[]
  color       String?
  sessions    Session[]
}

model Session {
  id          String    @id @default(uuid())
  title       String
  description String?
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: NoAction)
  students    Student[]
  attendance  String[]  @default([])
  programId   String
  program     Program   @relation(fields: [programId], references: [id], onDelete: NoAction)
  levelId     String
  level       Level     @relation(fields: [levelId], references: [id], onDelete: NoAction)
  start       DateTime
  end         DateTime
  color       String?
  class       Class?    @relation(fields: [classId], references: [id])
  classId     String?

  @@unique([title, start, end])
}

model Program {
  id          String    @id @default(uuid())
  name        String
  description String?
  Class       Class[]
  levels      Level[]
  Session     Session[]
}

model Level {
  id          String    @id @default(uuid())
  name        String
  duration    Float
  description String?
  price       Float
  programId   String
  program     Program   @relation(fields: [programId], references: [id], onDelete: NoAction)
  Class       Class[]
  Session     Session[]
}

model Payment {
  id          String    @id @default(uuid())
  code        String
  amount      Float
  total       Float
  date        DateTime
  period      String
  status      String
  discount    Float
  note        String?
  payedAmount Float
  due         DateTime
  payedDate   DateTime?
  students    Student[]
  archived    Boolean   @default(false)
}
